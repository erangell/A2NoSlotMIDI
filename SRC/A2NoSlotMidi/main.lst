ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : main.s
Current file: main.s

000000r 1               ;-------------------------------------------------------------------------
000000r 1               ;
000000r 1               ;  main.s
000000r 1               ;  A2NoSlotMidi
000000r 1               ;
000000r 1               ;  Created by Eric Rangell on 7/17/18.
000000r 1               ;-------------------------------------------------------------------------
000000r 1               ; APPLE MIDI DRIVER THROUGH ANNUNCIATOR 0
000000r 1               ; Copyright Â© 1998-2018 Eric Rangell. MIT License.
000000r 1               ;-------------------------------------------------------------------------
000000r 1               ; THIS DRIVER IMPLEMENTS ASYNCHRONOUS SERIAL DATA TRANSMISSION
000000r 1               ; THROUGH THE APPLE ANNUNCIATOR 0 OUTPUT PORT OF THE GAME CONNECTOR
000000r 1               ; USING 32 CYCLES PER BIT TO ACHIEVE A 31.25K MIDI BAUD RATE.
000000r 1               ;
000000r 1               ; //GS USERS NEED TO RUN THIS PROGRAM IN NORMAL SPEED MODE
000000r 1               ;
000000r 1               ; THE OUTPUT IS INITIALIZED TO A HIGH LOGIC VOLTAGE.  WHEN IT GOES
000000r 1               ; LOW FOR 32 MICROSECONDS, THAT INDICATES THE START BIT OF A MIDI BYTE.
000000r 1               ; THEN 8 BYTES OF DATA ARE TRANSMITTED, FOLLOWED BY A HIGH STOP BIT.
000000r 1               ; THE DATA BYTES REPRESENT MIDI MESSAGES WHICH CAN BE INTERPRETED BY
000000r 1               ; ANY MUSICAL INSTRUMENT THAT IMPLEMENTS MIDI.
000000r 1               ;
000000r 1               ; ENTRY POINTS: (Note: Origin must be set in Makefile)
000000r 1               ;
000000r 1               ; $9000 = INITIALIZE - TURNS ON ANNUNCIATOR 0 - MUST BE CALLED ONCE
000000r 1               ; $9003 = APPLESOFT CALL TO SEND ONE MIDI BYTE.  POKE THE BYTE IN $9004.
000000r 1               ; $9005 = ASSEMBLY CALL TO SEND ONE MIDI BYTE FROM ACCUMULATOR
000000r 1               ; $9008 = APPLESOFT OR ASSEMBLY CALL TO SEND SEVERAL BYTES AT ONCE:
000000r 1               ;         THE CALLER POPULATES LOCATION $D7 WITH THE NUMBER OF BYTES TO BE
000000r 1               ;         TRANSMITTED, AND A POINTER IN $CE,CF (LO,HI) WITH THE ADDRESS OF
000000r 1               ;         THE DATA BYTES, THEN CALLS THE ENTRY POINT "SENDMSG" TO TRANSMIT
000000r 1               ;         THE MESSAGE.
000000r 1               ; $900B = TURN ALL NOTES OFF
000000r 1               ; $900E = SEND A TEST MESSAGE - C MAJOR CHORD NOTE ONS
000000r 1               ; $9011 = SEND A TEST MESSAGE - C MAJOR CHORD NOTE OFFS
000000r 1               ; $9014 = CHANGE ANNUNCIATOR - MODIFIES CODE TO USE DIFFERENT ANNUNCIATOR
000000r 1               ; $9017 = ANNUNCIATOR TO USE: 0-3 - only looks at least significant 2 bits
000000r 1               ; $9018 = CHANGE LOGIC - BIT 7
000000r 1               ; $901B = SET BIT 7 TO USE NEGATIVE LOGIC
000000r 1               ;-------------------------------------------------------------------------
000000r 1               ; Enhancements for 2018:
000000r 1               ; 1. Disable interrupts during critical timing sections, preserve interrupt status
000000r 1               ; 2. Entry point to reconfigure program to use a different annunciator pair
000000r 1               ; 3. Entry point to reconfigure program for hardware interface using inverters only (not buffers)
000000r 1               ;-------------------------------------------------------------------------
000000r 1               ; CALLER MUST POPULATE THE FOLLOWING TWO ZERO PAGE LOCATIONS FOR SENDMSG:
000000r 1               NUMBYTES = $D7             ;NUMBER OF BYTES TO BE TRANSMITTED NOW (1-256)
000000r 1               ;                          ;THE VALUE 0 WILL TRANSMIT 256 BYTES.
000000r 1               DATAPTR  = $CE             ;POINTER TO THE BYTES TO BE TRANSMITTED NOW
000000r 1               ;-------------------------------------------------------------------------
000000r 1               AN0OFF   = $C058           ;APPLE ADDRESSES THAT CONTROL ANNUNCIATOR OUTPUTS
000000r 1               AN0ON    = $C059           ;PROGRAM REFERNCES ARE RELATIVE TO AN0
000000r 1               ;AN1OFF   = $C05A
000000r 1               ;AN1ON    = $C05B
000000r 1               ;AN2OFF   = $C05C
000000r 1               ;AN2ON    = $C05D
000000r 1               ;AN3OFF   = $C05E
000000r 1               ;AN3ON    = $C05F
000000r 1               ;-------------------------------------------------------------------------
000000r 1               .proc main
000000r 1               ;---------------------------------------------------------------------------
000000r 1               START:
000000r 1  4C rr rr             JMP INIT            ;MAIN ENTRY POINT - INITIALIZES ANNUNCIATORS
000003r 1               SENDFP:
000003r 1  A9 90                LDA #$90            ;ENTRY POINT FOR APPLESOFT: POKE BYTE AND CALL
000005r 1               SENDONE:
000005r 1  4C rr rr             JMP XMITONE         ;ENTRY POINT FOR TRANSMITTING ONE BYTE FROM ACCUM
000008r 1               SENDMSG:
000008r 1  4C rr rr             JMP XMITMSG         ;ENTRY POINT FOR TRANSMITTING A MIDI MESSAGE
00000Br 1               ALLNOFF:
00000Br 1  4C rr rr             JMP QUIET           ;TURN ALL NOTES OFF
00000Er 1               TEST1:
00000Er 1  4C rr rr             JMP TESTMSG1        ;SEND TEST MESSAGE 1 - C MAJOR CHORD ON
000011r 1               TEST2:
000011r 1  4C rr rr             JMP TESTMSG2        ;SEND TEST MESSAGE 2 - C MAJOR CHORD OFF
000014r 1                       ;
000014r 1               CHNGANNC:
000014r 1  4C rr rr             JMP CHGANNC         ;RECONFIGURE PROGRAM TO USE ANNUNCIATOR NUMBER IN NEXT BYTE
000017r 1               ANNC2USE:
000017r 1  00                   .byte $00           ;ONLY LEAST SIGNIFICANT 2 BITS ARE USED
000018r 1               CHNGLOGC:
000018r 1  4C rr rr             JMP CHGLOGIC        ;RECONFIGURE PROGRAM TO USE POSITIVE OR NEGATIVE LOGIC
00001Br 1               LOGICBYT:
00001Br 1  00                   .byte $00           ;SET HIGH BIT TO 1 TO USE NEGATIVE LOGIC, ELSE POSITIVE LOGIC (DEFAULT)
00001Cr 1               ;---------------------------------------------------------------------------
00001Cr 1  00           SAVENBYT: .byte $00             ;SAVE AREA FOR NUMBYTES
00001Dr 1  00           TEMPA:    .byte $00
00001Er 1  00           TEMPX:    .byte $00
00001Fr 1               ;ANNPAIR:  .byte  $00            ; ANNUNCIATOR NUMBER TIMES 2 (1=C05A, 2=C05C, 3=C05E)
00001Fr 1               ;---------------------------------------------------------------------------
00001Fr 1               INIT:
00001Fr 1  2C 59 C0             BIT AN0ON
000022r 1  60                   RTS
000023r 1               ;---------------------------------------------------------------------------
000023r 1               XMITMSG:
000023r 1  A5 D7                LDA NUMBYTES        ;SAVE NUMBER OF BYTES
000025r 1  8D rr rr             STA SAVENBYT        ;BECAUSE WE WILL CLOBBER IT
000028r 1  A0 00                LDY #$00            ;Y WILL BE AN INDEX INTO THE DATA AREA
00002Ar 1               XMITLOOP:
00002Ar 1  B1 CE                LDA (DATAPTR),Y     ;GET A DATA BYTE
00002Cr 1  20 rr rr             JSR XMITONE
00002Fr 1  C8                   INY                 ;POINT TO NEXT BYTE
000030r 1  C6 D7                DEC NUMBYTES        ;DECREMENT COUNTER
000032r 1  A5 D7                LDA NUMBYTES        ;CHECK IF ZERO
000034r 1  D0 F4                BNE XMITLOOP        ;LOOP UNTIL DONE SENDING ALL BYTES
000036r 1  AD rr rr             LDA SAVENBYT
000039r 1  85 D7                STA NUMBYTES        ;RESTORE ORIGINAL VALUE OF NUMBYTES
00003Br 1  60                   RTS
00003Cr 1               ;---------------------------------------------------------------------------
00003Cr 1               XMITONE:
00003Cr 1  8D rr rr             STA TEMPA           ;SAVE A AND X REGISTERS
00003Fr 1  8E rr rr             STX TEMPX
000042r 1               ;
000042r 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
000043r 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
000044r 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
000046r 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
000048r 1  8D rr rr             STA BIT7+1          ;MODIFY THE XMITBITS SUBROUTINE
00004Br 1  8A                   TXA                 ;RESTORE ACCUMULATOR
00004Cr 1               ;
00004Cr 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
00004Dr 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
00004Er 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
000050r 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
000052r 1  8D rr rr             STA BIT6+1          ;MODIFY THE XMITBITS SUBROUTINE
000055r 1  8A                   TXA                 ;RESTORE ACCUMULATOR
000056r 1               ;
000056r 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
000057r 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
000058r 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
00005Ar 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
00005Cr 1  8D rr rr             STA BIT5+1          ;MODIFY THE XMITBITS SUBROUTINE
00005Fr 1  8A                   TXA                 ;RESTORE ACCUMULATOR
000060r 1               ;
000060r 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
000061r 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
000062r 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
000064r 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
000066r 1  8D rr rr             STA BIT4+1          ;MODIFY THE XMITBITS SUBROUTINE
000069r 1  8A                   TXA                 ;RESTORE ACCUMULATOR
00006Ar 1               ;
00006Ar 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
00006Br 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
00006Cr 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
00006Er 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
000070r 1  8D rr rr             STA BIT3+1          ;MODIFY THE XMITBITS SUBROUTINE
000073r 1  8A                   TXA                 ;RESTORE ACCUMULATOR
000074r 1               ;
000074r 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
000075r 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
000076r 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
000078r 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
00007Ar 1  8D rr rr             STA BIT2+1          ;MODIFY THE XMITBITS SUBROUTINE
00007Dr 1  8A                   TXA                 ;RESTORE ACCUMULATOR
00007Er 1               ;
00007Er 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
00007Fr 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
000080r 1  A9 00                LDA #$00            ;ZERO OUT ACCUMULATOR FOR ADD
000082r 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
000084r 1  8D rr rr             STA BIT1+1          ;MODIFY THE XMITBITS SUBROUTINE
000087r 1  8A                   TXA                 ;RESTORE ACCUMULATOR
000088r 1               ;
000088r 1  0A                   ASL A               ;SHIFT BIT INTO CARRY
000089r 1  AA                   TAX                 ;SAVE CURRENT IMAGE OF DATA BYTE
00008Ar 1  A9 00                LDA #$00             ;ZERO OUT ACCUMULATOR FOR ADD
00008Cr 1  69 58                ADC #<AN0OFF        ;ADD CARRY TO ANNUNCIATOR ADDRESS
00008Er 1  8D rr rr             STA BIT0+1          ;MODIFY THE XMITBITS SUBROUTINE
000091r 1  8A                   TXA                 ;RESTORE ACCUMULATOR
000092r 1               ;
000092r 1  20 rr rr             JSR XMITBITS        ;SEND THE BYTE OUT
000095r 1  AE rr rr             LDX TEMPX
000098r 1  AD rr rr             LDA TEMPA           ;RESTORE X AND A
00009Br 1  60                   RTS
00009Cr 1               ;-----------------------------------------------------------------------
00009Cr 1               XMITBITS:
00009Cr 1  08                   PHP                 ;SAVE CURRENT INTERRUPT STATUS
00009Dr 1  78                   SEI                 ;MASK INTERRUPTS DURING CRITICAL TIMING SECTION
00009Er 1  2C 58 C0             BIT AN0OFF          ;4 CYCLES - TRANSMIT START BIT - ALWAYS LOW
0000A1r 1  20 rr rr             JSR DELAY22         ;6+22
0000A4r 1               BIT0:
0000A4r 1  2C 58 C0             BIT AN0OFF          ;4
0000A7r 1  20 rr rr             JSR DELAY22         ;6+22
0000AAr 1               BIT1:
0000AAr 1  2C 58 C0             BIT AN0OFF          ;4
0000ADr 1  20 rr rr             JSR DELAY22         ;6+22
0000B0r 1               BIT2:
0000B0r 1  2C 58 C0             BIT AN0OFF          ;4
0000B3r 1  20 rr rr             JSR DELAY22         ;6+22
0000B6r 1               BIT3:
0000B6r 1  2C 58 C0             BIT AN0OFF          ;4
0000B9r 1  20 rr rr             JSR DELAY22         ;6+22
0000BCr 1               BIT4:
0000BCr 1  2C 58 C0             BIT AN0OFF          ;4
0000BFr 1  20 rr rr             JSR DELAY22         ;6+22
0000C2r 1               BIT5:
0000C2r 1  2C 58 C0             BIT AN0OFF          ;4
0000C5r 1  20 rr rr             JSR DELAY22         ;6+22
0000C8r 1               BIT6:
0000C8r 1  2C 58 C0             BIT AN0OFF          ;4
0000CBr 1  20 rr rr             JSR DELAY22         ;6+22
0000CEr 1               BIT7:
0000CEr 1  2C 58 C0             BIT AN0OFF          ;4
0000D1r 1  20 rr rr             JSR DELAY22         ;6+22
0000D4r 1  2C 59 C0             BIT AN0ON           ;4        ;TRANSMIT STOP BIT - ALWAYS HIGH
0000D7r 1  20 rr rr             JSR DELAY22         ;6+22
0000DAr 1  28                   PLP                 ;RESTORE SAVED INTERRUPT STATUS
0000DBr 1  60                   RTS
0000DCr 1               ;-----------------------------------------------------------------------
0000DCr 1               DELAY22:
0000DCr 1  EA                   NOP       ;WAIT 22 CYCLES
0000DDr 1  EA                   NOP
0000DEr 1  EA                   NOP
0000DFr 1  EA                   NOP
0000E0r 1  EA                   NOP
0000E1r 1  EA                   NOP
0000E2r 1  EA                   NOP
0000E3r 1  EA                   NOP
0000E4r 1  60                   RTS
0000E5r 1               ;-----------------------------------------------------------------------
0000E5r 1               TESTMSG1:
0000E5r 1  A9 07                LDA #7
0000E7r 1  85 D7                STA NUMBYTES
0000E9r 1  A9 rr                LDA #<TESTDAT1
0000EBr 1  85 CE                STA DATAPTR
0000EDr 1  A9 rr                LDA #>TESTDAT1
0000EFr 1  85 CF                STA DATAPTR+1
0000F1r 1  20 rr rr             JSR SENDMSG
0000F4r 1  60                   RTS
0000F5r 1               ;-----------------------------------------------------------------------
0000F5r 1               TESTMSG2:
0000F5r 1  A9 07                LDA #7
0000F7r 1  85 D7                STA NUMBYTES
0000F9r 1  A9 rr                LDA #<TESTDAT2
0000FBr 1  85 CE                STA DATAPTR
0000FDr 1  A9 rr                LDA #>TESTDAT2
0000FFr 1  85 CF                STA DATAPTR+1
000101r 1  20 rr rr             JSR SENDMSG
000104r 1  60                   RTS
000105r 1               ;-----------------------------------------------------------------------
000105r 1               QUIET:
000105r 1  A9 90                LDA #$90
000107r 1  85 D7                STA NUMBYTES
000109r 1  A9 rr                LDA #<QUIETMSG
00010Br 1  85 CE                STA DATAPTR
00010Dr 1  A9 rr                LDA #>QUIETMSG
00010Fr 1  85 CF                STA DATAPTR+1
000111r 1  20 rr rr             JSR SENDMSG
000114r 1  60                   RTS
000115r 1               ;-----------------------------------------------------------------------
000115r 1               CHGANNC:
000115r 1  60                   RTS
000116r 1               ;-----------------------------------------------------------------------
000116r 1               CHGLOGIC:
000116r 1  60                   RTS
000117r 1               ;-----------------------------------------------------------------------
000117r 1               TESTDAT1:
000117r 1  90 3C 40 40      .byte $90,$3C,$40,$40,$40,$43,$40
00011Br 1  40 43 40     
00011Er 1               TESTDAT2:
00011Er 1  90 3C 00 40      .byte $90,$3C,$00,$40,$00,$43,$00
000122r 1  00 43 00     
000125r 1               QUIETMSG:
000125r 1  B0 78 00 B0      .byte $B0,$78,$00,$B0,$79,$00,$B0,$7B,$00
000129r 1  79 00 B0 7B  
00012Dr 1  00           
00012Er 1  B1 78 00 B1      .byte $B1,$78,$00,$B1,$79,$00,$B1,$7B,$00
000132r 1  79 00 B1 7B  
000136r 1  00           
000137r 1  B2 78 00 B2      .byte $B2,$78,$00,$B2,$79,$00,$B2,$7B,$00
00013Br 1  79 00 B2 7B  
00013Fr 1  00           
000140r 1  B3 78 00 B3      .byte $B3,$78,$00,$B3,$79,$00,$B3,$7B,$00
000144r 1  79 00 B3 7B  
000148r 1  00           
000149r 1  B4 78 00 B4      .byte $B4,$78,$00,$B4,$79,$00,$B4,$7B,$00
00014Dr 1  79 00 B4 7B  
000151r 1  00           
000152r 1  B5 78 00 B5      .byte $B5,$78,$00,$B5,$79,$00,$B5,$7B,$00
000156r 1  79 00 B5 7B  
00015Ar 1  00           
00015Br 1  B6 78 00 B6      .byte $B6,$78,$00,$B6,$79,$00,$B6,$7B,$00
00015Fr 1  79 00 B6 7B  
000163r 1  00           
000164r 1  B7 78 00 B7      .byte $B7,$78,$00,$B7,$79,$00,$B7,$7B,$00
000168r 1  79 00 B7 7B  
00016Cr 1  00           
00016Dr 1  B8 78 00 B8      .byte $B8,$78,$00,$B8,$79,$00,$B8,$7B,$00
000171r 1  79 00 B8 7B  
000175r 1  00           
000176r 1  B9 78 00 B9      .byte $B9,$78,$00,$B9,$79,$00,$B9,$7B,$00
00017Ar 1  79 00 B9 7B  
00017Er 1  00           
00017Fr 1  BA 78 00 BA      .byte $BA,$78,$00,$BA,$79,$00,$BA,$7B,$00
000183r 1  79 00 BA 7B  
000187r 1  00           
000188r 1  BB 78 00 BB      .byte $BB,$78,$00,$BB,$79,$00,$BB,$7B,$00
00018Cr 1  79 00 BB 7B  
000190r 1  00           
000191r 1  BC 78 00 BC      .byte $BC,$78,$00,$BC,$79,$00,$BC,$7B,$00
000195r 1  79 00 BC 7B  
000199r 1  00           
00019Ar 1  BD 78 00 BD      .byte $BD,$78,$00,$BD,$79,$00,$BD,$7B,$00
00019Er 1  79 00 BD 7B  
0001A2r 1  00           
0001A3r 1  BE 78 00 BE      .byte $BE,$78,$00,$BE,$79,$00,$BE,$7B,$00
0001A7r 1  79 00 BE 7B  
0001ABr 1  00           
0001ACr 1  BF 78 00 BF      .byte $BF,$78,$00,$BF,$79,$00,$BF,$7B,$00
0001B0r 1  79 00 BF 7B  
0001B4r 1  00           
0001B5r 1               ;----------------
0001B5r 1               ; END OF PROGRAM
0001B5r 1               ;----------------
0001B5r 1               .endproc
0001B5r 1               
